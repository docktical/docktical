#!/usr/bin/python3

import os
import platform
import subprocess
import sys
import yaml
import shutil

from argparse_yaml import argparser_from_config

DOCKTICAL = {}
DOCKER_COMPOSE = {}
ASSUME_YES = False


def load_docker_compose():
    global DOCKER_COMPOSE
    with open("docker-compose.yml", "r") as docker_compose:
        DOCKER_COMPOSE = yaml.safe_load(docker_compose)


def load_docktical():
    global DOCKTICAL
    with open("docktical.yml", "r") as docktical:
        DOCKTICAL = yaml.safe_load(docktical)


def ask_yes_no(question, default=None):
    if ASSUME_YES:
        return True
    answer = "_"
    valid_answers = ["y", "n", "Y", "N"]
    default_is_true = False
    if default == True:
        default_text = " [Y/n] "
        valid_answers.append("")
        default_is_true = True
    elif default == False:
        default_text = " [y/N] "
        valid_answers.append("")
    else:
        default_text = " "
    while answer not in valid_answers:
        answer = input(question + default_text)
    return answer in ["y", "Y"] or (answer == "" and default_is_true)


def wait_press_enter(msg):
    input("Press <enter> " + msg)


def run_scripts(key):
    if key in DOCKTICAL:
        scripts = DOCKTICAL[key]
        if isinstance(scripts, str):
            print("Docktical want to execute the following script on HOST: ")
            print(scripts)
            if ask_yes_no("Do you want to execute it?", True):
                shell(scripts, should_print=False)
            else:
                exit(0)
        elif isinstance(scripts, list):
            print("Docktical want to execute the following scripts on HOST: ")
            for script in scripts:
                print(script)
            if ask_yes_no("Do you want to execute them?", True):
                for script in scripts:
                    shell(script, should_print=False)
            else:
                exit(0)


def docker_compose(arguments):
    shell("docker compose " + arguments, should_print=True)


def shell(cmd, should_print):
    if should_print:
        print(cmd)
    res = os.system(cmd)
    if res != 0:
        print(f"Fail to execute `{cmd}`", file=sys.stderr)
        exit(res)


def open_file_with_default_app(path):
    if platform.system() == "Darwin":
        shell("open \"" + path + "\"", should_print=False)
    elif platform.system() == "Windows":
        os.startfile(path)
    else:
        shell("xdg-open \"" + path + "\"", should_print=False)


def open_terminal(container, user, title, script):
    if script is None:
        subprocess.call(
            f"alacritty --title \"{title}\" -e docker exec -u {user} -it {container} /bin/bash &",
            shell=True,
            stdout=open("/dev/null", "w+"),
            stderr=open("/dev/null", "w+"),
        )
    else:
        subprocess.call(
            f"alacritty --title \"{title}\" -e docker exec -u {user} -it {container} /bin/bash {script} &",
            shell=True,
            stdout=open("/dev/null", "w+"),
            stderr=open("/dev/null", "w+"),
        )


def cmd_start(should_rebuild, no_cache, no_tutorial):
    def rebuild():
        docker_compose("down")
        if no_cache:
            docker_compose("build --no-cache")
        else:
            docker_compose("build")
        docker_compose("up -d --remove-orphans")

    def open_terminals():
        for terminal in DOCKTICAL["terminals"]:
            container = terminal["container"]
            title = terminal.get("title", container)
            script = terminal.get("script", None)
            user = terminal.get("user", "user")
            open_terminal(DOCKER_COMPOSE["name"] + "-" + container + "-1", user, title, script)

    def show_tutorial():
        if "tutorial" in DOCKTICAL:
            if not no_tutorial and ask_yes_no("Do you want to open the tutorial?", True):
                open_file_with_default_app(DOCKTICAL["tutorial"])

    if should_rebuild:
        if ask_yes_no("Rebuild will remove all the data stored in the containers. Do you want to continue?",
                      False):
            rebuild()
        else:
            print("Skipping rebuild.")

    run_scripts("before")
    docker_compose("start")
    show_tutorial()
    wait_press_enter("to start the lab")
    open_terminals()


def cmd_terminal_open(terminal_name, is_regexp):
    if is_regexp:
        import re
        regexp = re.compile(terminal_name)

        def match(current):
            return regexp.match(current)
    else:
        def match(current):
            return current == terminal_name

    any_match = False
    terminals = []
    for terminal in DOCKTICAL["terminals"]:
        container = terminal["container"]
        title = terminal.get("title", container)
        terminals.append(title)
        if match(title):
            script = terminal.get("script", None)
            user = terminal.get("user", "user")
            open_terminal(DOCKER_COMPOSE["name"] +
                          "-" + container + "-1", user, title, script)
            any_match = True
    if not any_match:
        print(f"None of the terminals match '{
        terminal_name}'. The list of valid terminals are: {', '.join(terminals)}.")


def cmd_terminal_ls():
    terminals = []
    for terminal in DOCKTICAL["terminals"]:
        container = terminal["container"]
        title = terminal.get("title", container)
        terminals.append(title)
    print('\n'.join(terminals))


def cmd_stop():
    docker_compose("stop")
    run_scripts("after")


if __name__ == '__main__':

    docktical_path = shutil.which("docktical")
    while os.path.islink(docktical_path):
        docktical_path = os.readlink(docktical_path)
    src_directory = os.path.dirname(docktical_path)

    parser = argparser_from_config(os.path.join(src_directory, "cli.yml"))

    args = parser.parse_args()

    if (hasattr(args, "no_cache") and args.no_cache) and (not hasattr(args, "rebuild") or not args.rebuild):
        raise parser.error("the --no-cache flag only works with the --rebuild flag")

    load_docker_compose()
    load_docktical()

    if hasattr(args, "yes") and args.yes:
        ASSUME_YES = True

    if args.command == "start":
        cmd_start(args.rebuild, args.no_cache, args.no_tutorial)
    elif args.command == "terminal":
        if args.terminal_command == "open":
            cmd_terminal_open(args.terminal, args.regexp)
        elif args.terminal_command == "ls":
            cmd_terminal_ls()
    elif args.command == "stop":
        cmd_stop()
